// Generated by CoffeeScript 1.4.0
(function() {
  var any, contains, defaults, delay, each, every, extend, first, flatten, intersection, last, map, memoize, once, pluck, reduce, reject, select, sortBy, uniq, zip,
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  each = function(obj, iterator) {
    var index, item, key, value, _i, _len, _results, _results1;
    if (obj instanceof Array) {
      _results = [];
      for (index = _i = 0, _len = obj.length; _i < _len; index = ++_i) {
        item = obj[index];
        _results.push(iterator(item, index, obj));
      }
      return _results;
    } else {
      _results1 = [];
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        _results1.push(iterator(value, key, obj));
      }
      return _results1;
    }
  };

  contains = function(obj, target) {
    var bool;
    bool = false;
    each(obj, function(value) {
      if (value === target) {
        return bool = true;
      } else {
        return bool;
      }
    });
    return bool;
  };

  map = function(array, iterator) {
    return each(array, function(value) {
      return iterator(value);
    });
  };

  pluck = function(obj, key) {
    return map(obj, function(property) {
      if (property[key]) {
        return property[key];
      }
    });
  };

  last = function(array, n) {
    var _ref;
    if (array == null) {
      return;
    }
    _ref = array, array = 1 <= _ref.length ? __slice.call(_ref, 0) : [];
    if (n != null) {
      if (n === 0) {
        return [];
      } else {
        return array.slice(-n);
      }
    } else {
      return array.pop();
    }
  };

  first = function(array, n) {
    var _ref;
    if (array == null) {
      return;
    }
    _ref = array, array = 1 <= _ref.length ? __slice.call(_ref, 0) : [];
    if (n == null) {
      n = 1;
    }
    return array.slice(0, n);
  };

  reduce = function(obj, iterator, collector) {
    if (collector == null) {
      collector = 0;
    }
    each(obj, function(value) {
      return collector = iterator(collector, value);
    });
    return collector;
  };

  select = function(array, iterator) {
    var value, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      if (iterator(value)) {
        _results.push(value);
      }
    }
    return _results;
  };

  reject = function(array, iterator) {
    var value, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      if (!iterator(value)) {
        _results.push(value);
      }
    }
    return _results;
  };

  every = function(obj, iterator) {
    var bool, value, _i, _len;
    if (obj.length === 0) {
      return obj;
    }
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      value = obj[_i];
      if (iterator(value)) {
        bool = true;
      } else {
        return false;
      }
    }
    return bool;
  };

  any = function(obj, iterator) {
    var bool, value, _i, _len;
    if (obj.length === 0) {
      return false;
    }
    for (_i = 0, _len = obj.length; _i < _len; _i++) {
      value = obj[_i];
      if (iterator != null) {
        if (iterator(value)) {
          return true;
        } else {
          bool = false;
        }
      } else {
        if (value) {
          return true;
        } else {
          bool = false;
        }
      }
    }
    return bool;
  };

  uniq = function(array) {
    var tempArray, value, _i, _len, _results;
    tempArray = [];
    _results = [];
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      if (!contains(tempArray, value)) {
        _results.push(tempArray.push(value));
      }
    }
    return _results;
  };

  once = function(func) {
    var called;
    called = false;
    return function() {
      var result;
      if (called) {
        return result;
      }
      called = true;
      return result = func();
    };
  };

  memoize = function(func) {
    var result;
    result = {};
    return function(param) {
      if (result.hasOwnProperty(param)) {
        return result[param];
      } else {
        return result[param] = func(param);
      }
    };
  };

  delay = function(fun, wait) {
    var arg;
    arg = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    arg = arg.slice(2);
    return setTimeout((function() {
      return fun(arg);
    }), wait);
  };

  extend = function(obj) {
    var arg, args, key, value, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      for (key in arg) {
        value = arg[key];
        obj[key] = arg[key];
      }
    }
    return obj;
  };

  defaults = function(obj) {
    var arg, args, key, value, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      for (key in arg) {
        value = arg[key];
        if (obj[key] == null) {
          obj[key] = arg[key];
        }
      }
    }
    return obj;
  };

  flatten = function(nestedArray, result) {
    var value, _i, _len;
    if (result == null) {
      result = [];
    }
    for (_i = 0, _len = nestedArray.length; _i < _len; _i++) {
      value = nestedArray[_i];
      if (value instanceof Array) {
        flatten(value, result);
      } else {
        result.push(value);
      }
    }
    return result;
  };

  sortBy = function(obj, fn) {
    if (typeof fn === 'string') {
      return obj.sort(function(a, b) {
        return a[fn] - b[fn];
      });
    } else {
      return obj.sort(function(a, b) {
        return fn(a) - fn(b);
      });
    }
  };

  zip = function() {
    var args, i, result, value, _i, _len, _ref;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = [];
    _ref = args[0];
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      value = _ref[i];
      result[i] = pluck(args, "" + i);
    }
    return result;
  };

  intersection = function(array) {
    var arrays;
    arrays = 1 <= array.length ? __slice.call(array, 0) : [];
    return select(arrays[0], function(value) {
      var value2, _i, _len, _ref, _results;
      _ref = arrays[1];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        value2 = _ref[_i];
        _results.push(value === value2);
      }
      return _results;
    });
  };

  this._ = {
    each: each,
    contains: contains,
    map: map,
    pluck: pluck,
    last: last,
    first: first,
    reduce: reduce,
    select: select,
    reject: reject,
    every: every,
    any: any,
    uniq: uniq,
    once: once,
    memoize: memoize,
    delay: delay,
    extend: extend,
    defaults: defaults,
    flatten: flatten,
    sortBy: sortBy,
    zip: zip,
    intersection: intersection
  };

}).call(this);
